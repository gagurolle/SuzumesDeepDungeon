name: Production Deployment

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create data directories
      run: |
        New-Item -ItemType Directory -Force -Path C:\docker_data\db
        New-Item -ItemType Directory -Force -Path C:\docker_data\logs
        New-Item -ItemType Directory -Force -Path C:\certs

    - name: Copy certificate
      run: |
        # Проверяем наличие сертификата в репозитории
        if (Test-Path -Path "certs\aspnetcert.pfx") {
            Copy-Item -Path "certs\aspnetcert.pfx" -Destination "C:\certs\" -Force
            Write-Host "Certificate copied from repository"
        }
        else {
            Write-Host "Using existing certificate on server"
        }

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Build Angular app
      working-directory: SuzumesDeepDungeon/DeepDungeonClient
      run: |
        # Устанавливаем Node.js и зависимости в рабочей директории
        npm install -g npm@latest
        if (Test-Path package-lock.json) {
            npm ci
        } else {
            npm install
        }
        npm run build -- --configuration production

    - name: Deploy with Docker Compose
      run: |
            # Устанавливаем переменные окружения из GitHub Secrets
            $env:JWT_KEY = "${{ secrets.JWT_KEY }}"
            $env:RAWG_API_KEY = "${{ secrets.RAWG_API_KEY }}"
        
            docker compose -f docker-compose.yml down -V
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml up -d -V
