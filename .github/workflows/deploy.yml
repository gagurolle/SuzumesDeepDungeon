name: Production Deployment

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create data directories
      run: |
        New-Item -ItemType Directory -Force -Path C:\docker_data\db
        New-Item -ItemType Directory -Force -Path C:\docker_data\postgres
        New-Item -ItemType Directory -Force -Path C:\docker_data\logs
        New-Item -ItemType Directory -Force -Path C:\certbot\www
        New-Item -ItemType Directory -Force -Path C:\certs


    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Build Angular app
      working-directory: SuzumesDeepDungeon/DeepDungeonClient
      run: |
        # Устанавливаем Node.js и зависимости в рабочей директории
        npm install -g npm@latest
        if (Test-Path package-lock.json) {
            npm ci
        } else {
            npm install
        }
        npm run build -- --configuration production

    - name: Prepare production environment
      run: |
        # Создаем production версию nginx конфига
        $nginxConfig = Get-Content -Path "nginx-proxy-prod.conf" -Raw
        $nginxConfig = $nginxConfig -replace '\${DOMAIN_NAME}', "${{ secrets.DOMAIN_NAME }}"
        Set-Content -Path "nginx.conf" -Value $nginxConfig -NoNewline
        
        # Создаем .env файл для docker-compose
        "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}`nADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" | Out-File -FilePath ".env" -Encoding ASCII

    - name: Check for existing SSL certificates
      run: |
        # Проверяем, есть ли уже сертификаты
        if (Test-Path "C:\etc\letsencrypt\live\${{ secrets.DOMAIN_NAME }}\fullchain.pem") {
            Write-Host "SSL certificates already exist, skipping obtainment"
        } else {
            Write-Host "=================================================================="
            Write-Host "SSL CERTIFICATES NOT FOUND!"
            Write-Host "Please manually obtain SSL certificates by running on the server:"
            Write-Host "docker run --rm -it --name certbot -v C:\etc\letsencrypt:/etc/letsencrypt certbot/certbot certonly --manual --preferred-challenges dns -d ${{ secrets.DOMAIN_NAME }} -d *.${{ secrets.DOMAIN_NAME }} --email ${{ secrets.ADMIN_EMAIL }} --agree-tos --no-eff-email --manual-public-ip-logging-ok"
            Write-Host "=================================================================="

    - name: Deploy with Docker Compose
      run: |
            # Устанавливаем переменные окружения из GitHub Secrets
            $env:JWT_KEY = "${{ secrets.JWT_KEY }}"
            $env:RAWG_API_KEY = "${{ secrets.RAWG_API_KEY }}"
            $env:DOMAIN_NAME = "${{ secrets.DOMAIN_NAME }}"
            $env:ADMIN_EMAIL = "${{ secrets.ADMIN_EMAIL }}"
            $env:DB_HOST = "${{ secrets.DB_HOST }}"
            $env:DB_PORT = "${{ secrets.DB_PORT }}"
            $env:DB_NAME = "${{ secrets.DB_NAME }}"
            $env:DB_USER = "${{ secrets.DB_USER }}"
            $env:DB_PASSWORD = "${{ secrets.DB_PASSWORD }}"
        
            docker compose -f docker-compose.yml -f docker-compose.prod.yml down
            docker compose -f docker-compose.yml -f docker-compose.prod.yml build --no-cache
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d

    - name: Setup SSL certificate renewal reminder
      run: |
        Write-Host "=================================================================="
        Write-Host "IMPORTANT: SSL certificates need to be renewed manually every 90 days"
        Write-Host "Run this command to renew:"
        Write-Host "docker run --rm -it --name certbot -v C:\etc\letsencrypt:/etc/letsencrypt certbot/certbot renew --manual --preferred-challenges dns --manual-auth-hook /bin/true --manual-public-ip-logging-ok"
        Write-Host "=================================================================="
