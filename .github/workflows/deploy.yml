name: Production Deployment

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create data directories
      run: |
        New-Item -ItemType Directory -Force -Path C:\docker_data\db
        New-Item -ItemType Directory -Force -Path C:\docker_data\postgres
        New-Item -ItemType Directory -Force -Path C:\docker_data\logs
        New-Item -ItemType Directory -Force -Path C:\certbot\www
        New-Item -ItemType Directory -Force -Path C:\certs


    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Build Angular app
      working-directory: SuzumesDeepDungeon/DeepDungeonClient
      run: |
        # Устанавливаем Node.js и зависимости в рабочей директории
        npm install -g npm@latest
        if (Test-Path package-lock.json) {
            npm ci
        } else {
            npm install
        }
        npm run build -- --configuration production

    - name: Prepare production environment
      run: |
        # Создаем production версию nginx конфига
        $nginxConfig = Get-Content -Path "nginx-proxy-prod.conf" -Raw
        $nginxConfig = $nginxConfig -replace '\${DOMAIN_NAME}', "${{ secrets.DOMAIN_NAME }}"
        Set-Content -Path "nginx.conf" -Value $nginxConfig -NoNewline
        
        # Создаем .env файл для docker-compose
        "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}`nADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" | Out-File -FilePath ".env" -Encoding ASCII

    - name: Deploy with Docker Compose
      run: |
            # Устанавливаем переменные окружения из GitHub Secrets
            $env:JWT_KEY = "${{ secrets.JWT_KEY }}"
            $env:RAWG_API_KEY = "${{ secrets.RAWG_API_KEY }}"
            $env:DOMAIN_NAME = "${{ secrets.DOMAIN_NAME }}"
            $env:ADMIN_EMAIL = "${{ secrets.ADMIN_EMAIL }}"
            $env:DB_HOST = "${{ secrets.DB_HOST }}"
            $env:DB_PORT = "${{ secrets.DB_PORT }}"
            $env:DB_NAME = "${{ secrets.DB_NAME }}"
            $env:DB_USER = "${{ secrets.DB_USER }}"
            $env:DB_PASSWORD = "${{ secrets.DB_PASSWORD }}"
        
            docker compose -f docker-compose.yml -f docker-compose.prod.yml down
            docker compose -f docker-compose.yml -f docker-compose.prod.yml build --no-cache
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d

